https://www.youtube.com/watch?v=rB9rPdMRxIA&ab_channel=NextDayVideo

- prequesite:
    - python debug symbols: 
        - (built gdb with python should be enough)
        - if not you may build cpython which contains python-gdb.py
    - gdb built with python3:
        - download newest gdb version (currently 10.1)
        - mkdir build && cd build && ../configure --prefix=/usr --with-python=/usr/bin/python3 && sudo make install
    - enable tracing of non-descendant processes:
        - sysctl kernel.yama.ptrace_scope=0

- basics:
    - gcore (get core file)
    - py-bt / py-bt-full / bt (backtraces; prefix with py is on py level)
    - py-up / py-down (move stack up and down on py level)
    - up / down (same but for c) 
    - py-locals / py-print / info locals / info args (show local vars in stack frame)
    - py-list / list (src code where dubugger is currently)
    - info threads (show all threads)
    - thread 3 (select thread 3)
    - thread apply all py-bt (get all stack traces for all threads)

- typical debug session (running python script I guess):
    - gdb -p <pid> python3
    - info threads
    - py-bt
    - thread 2
    -> attach to process with pid, see threads, pull bt and maybe check specific thread

- side notes:
    - pgrep -f1 python (get pid)
    - gdb -c filename python 3 (filename in example: python3.4.core located via ls -larth)

_____________

https://www.youtube.com/watch?v=X6O5vyAO9_c&ab_channel=FOSDEM

- gdb debugs interpreter
- frame 0: kernel instruction parameter (often call to kernel)
- use gcore to get core dump of python program to analyze it (mostly usefull when program runs remotley)
- core dumps can be debugged via gdb

- strace for tracing system calls and signals

- maybe install debug infos of other c code